{"version":3,"sources":["components/MemoryCard.jsx","components/CardContainer.jsx","components/Score.jsx","components/NavBar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["MemoryCard","props","_props$body","body","image","name","react_default","a","createElement","src","alt","onClick","handleClick","className","CardContainer","cards","map","el","index","MemoryCard_MemoryCard","key","Score","currentScore","highScore","NavBar","feedback","Score_Score","App","state","clicked","_this","includes","setState","shuffleCards","currentClicked","push","newCards","shuffle","memImages","this","NavBar_NavBar","CardContainer_CardContainer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gyCAGe,SAASA,EAAWC,GAAO,IAAAC,EACjBD,EAAME,KAArBC,EADgCF,EAChCE,MAAOC,EADyBH,EACzBG,KACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAOM,IAAKL,EAAMM,QAAS,kBAAMV,EAAMW,YAAYX,EAAME,KAAKE,OAAOQ,UAAU,qCCFhF,SAASC,EAAcb,GACpC,OACEK,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACZZ,EAAMc,MAAMC,IAAI,SAACC,EAAIC,GAAL,OACfZ,EAAAC,EAAAC,cAACW,EAAD,CAAYhB,KAAMc,EAAIG,IAAKF,EAAON,YAAaX,EAAMW,uBCL9C,SAASS,EAAOpB,GAAO,IAC1BqB,EAA4BrB,EAA5BqB,aAAcC,EAActB,EAAdsB,UACtB,OACIjB,EAAAC,EAAAC,cAAA,MAAIK,UAAU,cAAd,UAAmCS,EAAnC,gBAA8DC,SCFvD,SAASC,EAAQvB,GAC5B,OACIK,EAAAC,EAAAC,cAAA,OAAKK,UAAU,UACXP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,yBAAd,aACAP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,yBAAyBZ,EAAMwB,UAC7CnB,EAAAC,EAAAC,cAACkB,EAAD,CAAOJ,aAAcrB,EAAMqB,aAAcC,UAAWtB,EAAMsB,UAAWV,UAAU,0CC8C5Ec,6MA9CbC,MAAQ,CACNb,MAAQ,GACRc,QAAU,GACVJ,SAAW,4BACXH,aAAe,EACfC,UAAY,KAOdX,YAAc,SAACP,GACb,GAAGyB,EAAKF,MAAMC,QAAQE,SAAS1B,GAC7ByB,EAAKE,SAAS,CAACV,aAAc,EAAGO,QAAS,GAAIJ,SAAU,kBACrDK,EAAKG,oBAEJ,CACH,IAAMC,EAAiBJ,EAAKF,MAAMC,QAClCK,EAAeC,KAAK9B,GACpByB,EAAKE,SAAS,CAACH,QAASK,EAAgBZ,aAAcQ,EAAKF,MAAMN,aAAa,EAAGG,SAAU,gBACzF,WAEKK,EAAKF,MAAML,UAAYO,EAAKF,MAAMN,cACnCQ,EAAKE,SAAS,CAACT,UAAWO,EAAKF,MAAMN,eACvCQ,EAAKG,qBAMbA,aAAe,WACb,IAAMG,EAAWC,IAAQC,GACzBR,EAAKE,SAAS,CAACjB,MAAOqB,wFAxBtBG,KAAKN,gDA4BL,OACE3B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACgC,EAAD,CAAQf,SAAUc,KAAKX,MAAMH,SAAUH,aAAciB,KAAKX,MAAMN,aAAcC,UAAWgB,KAAKX,MAAML,YACpGjB,EAAAC,EAAAC,cAACiC,EAAD,CAAe1B,MAAOwB,KAAKX,MAAMb,MAAOH,YAAa2B,KAAK3B,sBAzChD8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b9e1845e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./MemoryCard.css\";\n\nexport default function MemoryCard(props) {\n  const { image, name} = props.body\n  return(\n      <img src={image} alt={name} onClick={() => props.handleClick(props.body.name)} className=\"mem-card img-thumbnail m-1\"/>\n  );\n \n}\n","import React from \"react\";\nimport MemoryCard from \"./MemoryCard\";\nimport './CardContainer.css'\n\nexport default function CardContainer(props) {\n  return (\n    <div className=\"container\">\n      {props.cards.map((el, index) => (\n        <MemoryCard body={el} key={index} handleClick={props.handleClick} />\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport './Score.css'\n\nexport default function Score (props) {\n    const { currentScore, highScore } = props;\n    return(\n        <h2 className='text-light'>Score: {currentScore} | Hi-Score: {highScore}</h2>\n    )\n}","import React from 'react'\nimport Score from './Score'\nimport './NavBar.css'\n\nexport default function NavBar (props) {\n    return (\n        <nav className=\"navbar\">\n            <h2 className=\"navbar-nav text-light\">PepeClick</h2>\n            <h2 className=\"navbar-nav text-light\">{props.feedback}</h2>\n            <Score currentScore={props.currentScore} highScore={props.highScore} className=\"navbar-nav\"/>\n        </nav>\n    )\n} ","import React, { Component } from 'react';\nimport memImages from './images.json'\nimport CardContainer from './components/CardContainer'\nimport NavBar from './components/NavBar'\nimport './App.css';\n\nimport shuffle from 'lodash.shuffle'\n\nclass App extends Component {\n  state = {\n    cards : [],\n    clicked : [],\n    feedback : 'Don\\'t click a Pepe twice!',\n    currentScore : 0,\n    highScore : 0\n  }\n\n  componentDidMount(){\n    this.shuffleCards();\n  }\n\n  handleClick = (name) => {\n    if(this.state.clicked.includes(name)) {\n      this.setState({currentScore: 0, clicked: [], feedback: 'Wrong guess...'},\n        this.shuffleCards());\n    }\n    else {\n      const currentClicked = this.state.clicked;\n      currentClicked.push(name);\n      this.setState({clicked: currentClicked, currentScore: this.state.currentScore+1, feedback: 'Right guess!'},\n        () => { \n          // if you gain score and its higher than the highscore, set highscore to score\n          if(this.state.highScore < this.state.currentScore)\n            this.setState({highScore: this.state.currentScore})\n          this.shuffleCards();\n        }\n      )\n    }\n  }\n  \n  shuffleCards = () => {\n    const newCards = shuffle(memImages);\n    this.setState({cards: newCards});\n  } \n\n  render() {\n    return (\n      <div className=\"app\">\n        <NavBar feedback={this.state.feedback} currentScore={this.state.currentScore} highScore={this.state.highScore}/>\n        <CardContainer cards={this.state.cards} handleClick={this.handleClick}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}